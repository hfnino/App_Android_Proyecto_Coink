plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt' // nos autogenera el codigo por detras cuando usamos las anotaciones para Room y para Dagger Hilt
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "co.com.personal.hnino.coink"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures{
        viewBinding = true   //habilitamos el proyecto para poder usar el View BInding
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // ViewModel en Fragment
    implementation "androidx.fragment:fragment-ktx:1.3.2" // ==> 1.2.5 ==> 1.4.1  //Para fascilitar la creaci贸n del viewModel en los Fragment
    // ViewModel en Activity
    implementation "androidx.activity:activity-ktx:1.2.2" // ==> 1.2.2 ==> 1.4.0
    // ViewModel => Es una capa del patron de arquitectura MVVM
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0" // ==> 2.3.1 ==> 2.4.1
    // LiveData => hace la conexi贸n entre las Vistas (Interfaz Grafica - Activity y fracments) y el ViewModel. Cuando hay un cambio en nuestro modelo, LiveData se da cuenta
    // a traves del patron observer?? y avisara a la la vista correspondiente (Interfaz Grafica - Activity y/o fracments)
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0" // ==> 2.3.1 ==> 2.4.1

    /*---------- Manipulaci贸n de imagenes ----------- */
    implementation 'com.squareup.picasso:picasso:2.71828' //libreria de picasso para procesamiento de imagenes.

    /* --------- Consumo de APIs ------------ */
    implementation "com.squareup.retrofit2:retrofit:2.9.0" // ==> 2.9.0 => OK  //La Biblioteca Retrofir 2, Es otra biblioteca para hacer peticiones HTTP en consumo de APIs
    // usando los verbos o metodos HTTP (GET, POST, PUT, DELETE etc)
    implementation "com.squareup.retrofit2:converter-gson:2.9.0" // ==> 2.9.0 => OK //libreria GSON para tranformar objetos en JSON (complemento de retrofit 2)
    implementation("com.squareup.okhttp3:okhttp:4.9.3") //para poder visuarlizar a traves del logcat la respuesta que estamos recibiendo
    implementation("com.squareup.okhttp3:logging-interceptor:4.9.3")

    /* --------- Corrutinas------------ */
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2' //==> 1.5.2 ==> 1.4.1 ==> 1.3.6

    /* ------------ Dagger Hilt -- para inyecci贸n de dependencias  ----------*/
    implementation "com.google.dagger:hilt-android:2.32-alpha" // ==> 2.32-alpha ==> 2.35 ==> 2.41
    kapt "com.google.dagger:hilt-android-compiler:2.32-alpha"  // ==> 2.32-alpha ==> 2.35 ==> 2.41

    /*-------------- Room -------------------*/
    implementation "androidx.room:room-ktx:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2"
}